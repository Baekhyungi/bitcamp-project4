/*
 * This source file was generated by the Gradle 'init' task
 */
package bitcamp.myApp;

import bitcamp.Prompt.Prompt;

import java.util.LinkedList;
import java.util.Queue;

public class App {

  private final int[][] arr = new int[3][3];

  public static void main(String[] args) {
    App app = new App();
    app.execute();
  }

  public void execute() {
    while (true) {
      print();
      if (!checkArr(arr)) {
        System.out.println("Draw!");
        break;
      }
      int[] move = player1();
      if (bfs(move[0], move[1], 1)) {
        print();
        System.out.println("Player 1 wins!");
        break;
      }
      print();
      if (!checkArr(arr)) {
        System.out.println("Draw!");
        break;
      }
      move = player2();
      if (bfs(move[0], move[1], 2)) {
        print();
        System.out.println("Player 2 wins!");
        break;
      }
    }
  }

  private int[] player1() {
    while (true) {
      String command = Prompt.input("Player 1 (x,y): ");
      int i = Integer.parseInt(command.split(",")[0]);
      int j = Integer.parseInt(command.split(",")[1]);
      if (i >= 0 && i < 3 && j >= 0 && j < 3 && arr[i][j] == 0) {
        arr[i][j] = 1;
        return new int[] {i, j};
      } else {
        System.out.println("Invalid move, try again.");
      }
    }
  }

  private int[] player2() {
    while (true) {
      String command = Prompt.input("Player 2 (x,y): ");
      int i = Integer.parseInt(command.split(",")[0]);
      int j = Integer.parseInt(command.split(",")[1]);
      if (i >= 0 && i < 3 && j >= 0 && j < 3 && arr[i][j] == 0) {
        arr[i][j] = 2;
        return new int[] {i, j};
      } else {
        System.out.println("Invalid move, try again.");
      }
    }
  }

  private boolean checkArr(int[][] arr) {
    for (int i = 0; i < 3; i++) {
      for (int j = 0; j < 3; j++) {
        if (arr[i][j] == 0) {
          return true;
        }
      }
    }
    return false;
  }

  private boolean bfs(int x, int y, int player) {
    int[][] directions = {{1, 0}, {0, 1}, {1, 1}, {1, -1}};
    for (int[] direction : directions) {
      int count = 1;
      Queue<int[]> queue = new LinkedList<>();
      boolean[][] visited = new boolean[3][3];
      queue.add(new int[] {x, y});
      visited[x][y] = true;

      while (!queue.isEmpty()) {
        int[] cell = queue.poll();
        int cx = cell[0];
        int cy = cell[1];
        for (int i = -1; i <= 1; i += 2) {
          int nx = cx + i * direction[0];
          int ny = cy + i * direction[1];
          if (nx >= 0 && nx < 3 && ny >= 0 && ny < 3 && arr[nx][ny] == player && !visited[nx][ny]) {
            visited[nx][ny] = true;
            queue.add(new int[] {nx, ny});
            count++;
            if (count == 3) {
              return true;
            }
          }
        }
      }
    }
    return false;
  }

  public void print() {
    for (int i = 0; i < 3; i++) {
      for (int j = 0; j < 3; j++) {
        System.out.printf("%d ", arr[i][j]);
      }
      System.out.println();
    }
  }
}
